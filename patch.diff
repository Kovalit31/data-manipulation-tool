diff --git a/customcmd-original/__main__.py b/customcmd-patch/__main__.py
index e1146cb..93dfde0 100644
--- a/customcmd-original/__main__.py
+++ b/customcmd-patch/__main__.py
@@ -11,6 +11,8 @@ def main(args: list) -> None:
     loader.load_module(wrapper.commands.unix_like.echo, 'echo')
     loader.load_module(wrapper.commands.unix_like.cd, 'cd')
     loader.load_module(wrapper.commands.unix_like.pwd, 'pwd')
+    loader.load_module(wrapper.commands.dbcmd_mod.create_db, 'createdb')
+    loader.load_module(wrapper.commands.dbcmd_mod.dbinfo, 'dbinfo')
     loader.load_module(wrapper.commands.unix_like.exit, 'exit', after=core.config.SYSEXIT)
     loader.load_module(wrapper.commands.bash_like.exec, 'exec', after=core.config.LOADFILE, unpack_output=True)
     loader.load_module(wrapper.commands.bash_like.read, 'read', after=core.config.EXPORTVAR, unpack_output=True)
diff --git a/customcmd-original/core/__init__.py b/customcmd-patch/core/__init__.py
index d63bc18..77f74b2 100644
--- a/customcmd-original/core/__init__.py
+++ b/customcmd-patch/core/__init__.py
@@ -1 +1,3 @@
 from . import config
+from . import tools
+from . import baseconfig
diff --git a/customcmd-patch/core/baseconfig.py b/customcmd-patch/core/baseconfig.py
new file mode 100644
index 0000000..7016f79
--- /dev/null
+++ b/customcmd-patch/core/baseconfig.py
@@ -0,0 +1,13 @@
+import sys
+
+SIGNED = 11
+UNSIGNED = 10
+MAJORVERSION = 1
+MINORVERSION = 0
+DIR = 32
+FILE = 16
+_64BIT = sys.maxsize > 2 ** 32 - 1
+MAXLEN = 2 ** 32 - 1 if not _64BIT else 2 ** 64 - 1
+MAXNAMELEN = 2 ** 16 - 1
+MAXNAMEHEXLEN = len(str(MAXNAMELEN).encode().hex())
+MAXHEXLEN = len(str(MAXLEN).encode().hex())
diff --git a/customcmd-original/core/config.py b/customcmd-patch/core/config.py
index dfdb0f2..7f4d7d9 100644
--- a/customcmd-original/core/config.py
+++ b/customcmd-patch/core/config.py
@@ -15,8 +15,7 @@ EXPORTVAR = 5
 
 # Other
 
-DEFAULT_LANG = "ru"
-VERSION = 0x00000001
+DEFAULT_LANG = "en"
 
 # Variable set
 
diff --git a/customcmd-original/locale/lang/c.po b/customcmd-patch/locale/lang/c.po
index d8292f6..acf118c 100644
--- a/customcmd-original/locale/lang/c.po
+++ b/customcmd-patch/locale/lang/c.po
@@ -41,3 +41,13 @@ error.locale.nolang
 No such language:
 locale.reload.trigger
 Locale reloaded!
+db.all.setid.action
+For creating new database, need to provide it ID. Please it write next:
+db.all.sign.maybe
+Databases can be signed
+db.all.sign.action
+Would you like to sign new db [y]es/[n]o?
+db.all.sign.text.action
+Please type the sign text above
+error.command.db.create.fewargs
+Few args for database create!
diff --git a/customcmd-original/locale/lang/en.po b/customcmd-patch/locale/lang/en.po
index efa1fd7..1b12920 100644
--- a/customcmd-original/locale/lang/en.po
+++ b/customcmd-patch/locale/lang/en.po
@@ -40,3 +40,13 @@ error.locale.nolang
 No such language:
 locale.reload.trigger
 Locale reloaded!
+db.all.setid.action
+For creating new database, need to provide it ID. Please it write next:
+db.all.sign.maybe
+Databases can be signed
+db.all.sign.action
+Would you like to sign new db [y]es/[n]o?
+db.all.sign.text.action
+Please type the sign text above
+error.command.db.create.fewargs
+Few args for database create!
diff --git a/customcmd-original/locale/lang/ru.po b/customcmd-patch/locale/lang/ru.po
index 78bdaa4..e3919a7 100644
--- a/customcmd-original/locale/lang/ru.po
+++ b/customcmd-patch/locale/lang/ru.po
@@ -40,3 +40,13 @@ error.locale.nolang
 Нет такого языка:
 locale.reload.trigger
 Язык установлен!
+db.all.setid.action
+Для создания новой БД надо указать её ИД. Ввведите его:
+db.all.sign.maybe
+БД могут быть подписаны
+db.all.sign.action
+Хотите ли вы подписать новую БД [д]а/[н]ет?
+db.all.sign.text.action
+Напишите текст для подписи ниже
+error.command.db.create.fewargs
+Недостаточно аргументов для создания базы данных!
diff --git a/customcmd-original/locale/tokens.py b/customcmd-patch/locale/tokens.py
index ddf887a..65f67ad 100644
--- a/customcmd-original/locale/tokens.py
+++ b/customcmd-patch/locale/tokens.py
@@ -25,3 +25,8 @@ FEW_ARGS_ALL = "command.all.fewargs"
 FILE_WRITE_ERROR = "error.io.file.write"
 NO_SUCH_LOCALE = "error.locale.nolang"
 LOCALE_RELOADED = "locale.reload.trigger"
+NEED_FOR_DB_ID = "db.all.setid.action"
+IF_SIGN_DB = "db.all.sign.action"
+CAN_SIGN_DB = "db.all.sign.maybe"
+PLEASE_SET_SIGN_DATA = "db.all.sign.text.action"
+FEW_ARGS_FOR_CREATEDB = "error.command.db.create.fewargs"
diff --git a/customcmd-original/tools/functions.py b/customcmd-patch/tools/functions.py
index ef09a46..5f45833 100644
--- a/customcmd-original/tools/functions.py
+++ b/customcmd-patch/tools/functions.py
@@ -62,3 +62,12 @@ def write_to_file(path: str, text: str) -> None:
         file.close()
     except Exception as e:
         info(f"{locale.get_by_token(tokens.FILE_WRITE_ERROR)} {e}", level='e')
+
+def removebefore(orig: str, tostrip: str) -> str:
+    newstring = ''
+    for x in range(len(orig)):
+        if not orig[x] == tostrip:
+            newstring = add_or_set_str(newstring, orig[x])
+        else:
+            break
+    return newstring
diff --git a/customcmd-original/wrapper/commands/__init__.py b/customcmd-patch/wrapper/commands/__init__.py
index fd1b873..1ebf12f 100644
--- a/customcmd-original/wrapper/commands/__init__.py
+++ b/customcmd-patch/wrapper/commands/__init__.py
@@ -1,2 +1,3 @@
 from . import unix_like
 from . import bash_like
+from . import dbcmd_mod
diff --git a/customcmd-patch/wrapper/commands/dbcmd_mod.py b/customcmd-patch/wrapper/commands/dbcmd_mod.py
new file mode 100644
index 0000000..e7e2dc5
--- /dev/null
+++ b/customcmd-patch/wrapper/commands/dbcmd_mod.py
@@ -0,0 +1,183 @@
+import math
+from ...tools import functions, pathutil
+from ...locale import locale, tokens
+from ...core import baseconfig
+
+import os
+
+
+
+def create_db(args: list):
+    '''
+    Create DB partitioning 
+    @param args[0] - File
+    @param args[1] - DB id
+    @param args[2] - (optional) DB sign
+    '''
+    if functions.return_if_few(args, 1, msg=tokens.FEW_ARGS_FOR_CREATEDB):
+        return
+    path = pathutil.get_full_path(args[0], return_else=True)
+    if os.path.exists(path):
+        if not functions.interactive(locale.get_by_token(tokens.NEED_REPLACE_FILE), locale.get_by_token(tokens.CONTINUE_QUESTION), _additional=args[0]):
+            return
+    db_name = args[1] if len(args) > 1 else input(f"{locale.get_by_token(tokens.NEED_FOR_DB_ID)} ")
+    db_sign = ""
+    if len(args) > 2:
+        db_sign = " ".join(args[2:]).replace("\\", "\n")
+    else:
+        if functions.interactive(locale.get_by_token(tokens.CAN_SIGN_DB), locale.get_by_token(tokens.IF_SIGN_DB)):
+            functions.info(f"{locale.get_by_token(tokens.PLEASE_SET_SIGN_DATA)}")
+            while True:
+                db_sign = functions.add_or_set_str(db_sign, input().strip().replace("\\", "\n"))
+                if not db_sign.endswith("\n"):
+                    break
+    db_data = __create_dbdata(db_sign, db_name)
+    functions.write_to_file(path, db_data)
+    
+def load_db():
+    pass
+
+def unload_db():
+    pass
+
+def print_db():
+    pass
+
+def remove_db():
+    pass
+
+# keys 
+
+# def add_key():
+#     pass
+
+# def remove_key():
+#     pass
+
+# def edit_key():
+#     pass
+
+# def print_key():
+#     pass
+
+def dbls():
+    pass
+
+def rmdbkey():
+    pass
+
+def rmdbdir():
+    pass
+
+def dbcd():
+    pass
+
+def mkdbdir():
+    pass
+
+def adddbkey():
+    pass
+
+def dbinfo(args: list):
+    if functions.return_if_few(args, 1, msg=tokens.FEW_ARGS_FOR_CREATEDB):
+        return
+    path = pathutil.is_file_throw(args[0])
+    if path == None:
+        functions.info("", level='e')
+        return
+    dbdata = ''
+    try:
+        file = open(path, 'r', encoding='utf-8')
+        dbdata = file.readlines()[0]
+        file.close()
+    except:
+        return
+    __parse(dbdata)
+
+def __create_dbdata(s: str, n: str):
+    dbdata = ""
+    sign = s.encode().hex() if s != "" and s != None and s.strip() != "" else None
+    name = n.encode().hex()
+    s_len = len(sign) if sign != None else 0
+    n_len = len(name)
+    root = ".".encode().hex()
+    if s_len > baseconfig.MAXLEN or n_len > baseconfig.MAXNAMELEN:
+        functions.info('', level='e')
+        return None
+    dbdata = functions.add_or_set_str(dbdata, "64" if baseconfig._64BIT else "32") # Bit count
+    # Add version data
+    dbdata = functions.add_to_string_with_nl(dbdata, baseconfig.MAJORVERSION.to_bytes().hex().zfill(baseconfig.MAXNAMEHEXLEN)) 
+    dbdata = functions.add_to_string_with_nl(dbdata, baseconfig.MINORVERSION.to_bytes().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    # Signing
+    dbdata = functions.add_to_string_with_nl(dbdata, baseconfig.SIGNED.to_bytes().hex().zfill(baseconfig.MAXNAMEHEXLEN)) if sign != None else functions.add_to_string_with_nl(dbdata, baseconfig.UNSIGNED.to_bytes().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_to_string_with_nl(dbdata, s_len.to_bytes().hex().zfill(baseconfig.MAXHEXLEN)) if sign != None else dbdata
+    dbdata = functions.add_to_string_with_nl(dbdata, math.ceil(s_len // baseconfig.MAXHEXLEN).to_bytes().hex().zfill(baseconfig.MAXNAMEHEXLEN)) if sign != None else dbdata
+    dbdata = functions.add_to_string_with_nl(dbdata, "0"*(baseconfig.MAXHEXLEN - s_len % baseconfig.MAXHEXLEN) + sign) if sign != None else dbdata
+    # Database name
+    dbdata = functions.add_to_string_with_nl(dbdata, n_len.to_bytes().hex().zfill(baseconfig.MAXHEXLEN))
+    dbdata = functions.add_to_string_with_nl(dbdata, math.ceil(n_len // baseconfig.MAXHEXLEN).to_bytes().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_to_string_with_nl(dbdata, "0"*(baseconfig.MAXHEXLEN - n_len % baseconfig.MAXHEXLEN) + name)
+    # Directory sign (! here always)
+    dbdata = functions.add_to_string_with_nl(dbdata, baseconfig.DIR.to_bytes().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    # Directory structure (See Comments)
+    dbdata = functions.add_to_string_with_nl(dbdata, len(root).to_bytes().hex().zfill(baseconfig.MAXHEXLEN))
+    dbdata = functions.add_to_string_with_nl(dbdata, math.ceil(len(root) // baseconfig.MAXHEXLEN).to_bytes().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_to_string_with_nl(dbdata, "0"*(baseconfig.MAXHEXLEN - len(root) % baseconfig.MAXHEXLEN) + root)
+    dbdata = functions.add_to_string_with_nl(dbdata, (0).to_bytes().hex().zfill(baseconfig.MAXHEXLEN))
+    print(dbdata)
+    return dbdata.replace("\n", "")
+
+def __parse(dbdata: str):
+    if len(dbdata) < 252:
+        return (None)
+    # Indexes
+    _sysbytes_i = 2
+    _majorver_i = baseconfig.MAXNAMEHEXLEN + _sysbytes_i
+    _minorver_i = baseconfig.MAXNAMEHEXLEN + _majorver_i
+    _issigned_i = baseconfig.MAXNAMEHEXLEN + _minorver_i
+    _sign_len_i = None
+    # Str variables
+    _sysbytes = dbdata[:_sysbytes_i]
+    _majorver = bytes.fromhex(dbdata[_sysbytes_i:_majorver_i])
+    _minorver = bytes.fromhex(dbdata[_majorver_i:_minorver_i])
+    _issigned = bytes.fromhex(dbdata[_minorver_i:_issigned_i])
+    sysbytes = int(_sysbytes)
+    majorver = int.from_bytes(_majorver)
+    minorver = int.from_bytes(_minorver)
+    issigned = int.from_bytes(_issigned)
+    _sign = None
+    # if issigned:
+        # pass
+    print(f"Bytes: {sysbytes}", f"Majorver: {majorver}", f"Minorver: {minorver}", f"Is Signed: {issigned}", sep="\n")
+
+'''
+# Comments
+
+## Data base structure
+
+bits
+version
+s/u - signed/unsigned
+if s, Sign len
+if s, sign
+name len
+db name
+0x0001
+.
+num of files/dirs
+d/f (dir/file)
+
+name len    -|
+lol.keys    -|
+num of keys -| file
+keylen      -|
+key         -|
+
+d/f (dir/file)
+name len          -|
+users             -| 
+num of files/dirs -| dirs
+...
+0x0000 # Dbend
+'''
+
diff --git a/customcmd-original/wrapper/control.py b/customcmd-patch/wrapper/control.py
index 2ec9e6b..aa473e2 100644
--- a/customcmd-original/wrapper/control.py
+++ b/customcmd-patch/wrapper/control.py
@@ -88,6 +88,7 @@ class Wrap():
                 print()
                 break
             _ret = self.exec()
+#            print(_ret)
             code = _ret[0] if not type(_ret) == int else _ret
             other = _ret[1:] if type(_ret) != int and len(_ret) > 1 else []
             if code == config.SYSEXIT and not in_command:
