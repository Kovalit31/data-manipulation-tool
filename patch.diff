diff --git a/customcmd-original/customcmd/__main__.py b/customcmd-patch/customcmd/__main__.py
index e1146cb..692ed86 100644
--- a/customcmd-original/customcmd/__main__.py
+++ b/customcmd-patch/customcmd/__main__.py
@@ -11,6 +11,7 @@ def main(args: list) -> None:
     loader.load_module(wrapper.commands.unix_like.echo, 'echo')
     loader.load_module(wrapper.commands.unix_like.cd, 'cd')
     loader.load_module(wrapper.commands.unix_like.pwd, 'pwd')
+    loader.load_module(wrapper.commands.dbcmd_mod.create_db, 'createdb')
     loader.load_module(wrapper.commands.unix_like.exit, 'exit', after=core.config.SYSEXIT)
     loader.load_module(wrapper.commands.bash_like.exec, 'exec', after=core.config.LOADFILE, unpack_output=True)
     loader.load_module(wrapper.commands.bash_like.read, 'read', after=core.config.EXPORTVAR, unpack_output=True)
diff --git a/customcmd-original/customcmd/core/__init__.py b/customcmd-patch/customcmd/core/__init__.py
index d63bc18..77f74b2 100644
--- a/customcmd-original/customcmd/core/__init__.py
+++ b/customcmd-patch/customcmd/core/__init__.py
@@ -1 +1,3 @@
 from . import config
+from . import tools
+from . import baseconfig
diff --git a/customcmd-patch/customcmd/core/baseconfig.py b/customcmd-patch/customcmd/core/baseconfig.py
new file mode 100644
index 0000000..b3172e8
--- /dev/null
+++ b/customcmd-patch/customcmd/core/baseconfig.py
@@ -0,0 +1,13 @@
+import sys
+
+SIGNED = 0x0001
+UNSIGNED = 0x0000
+MAJORVERSION = 0x0001
+MINORVERSION = 0x0000
+DIR = 0x0100
+FILE = 0x0200
+_64BIT = sys.maxsize > 2 ** 32 - 1
+MAXLEN = 2 ** 32 - 1 if not _64BIT else 2 ** 64 - 1
+MAXNAMELEN = 2 ** 16 - 1
+MAXNAMEHEXLEN = len(str(MAXNAMELEN).encode().hex())
+MAXHEXLEN = len(str(MAXLEN).encode().hex())
diff --git a/customcmd-original/customcmd/core/config.py b/customcmd-patch/customcmd/core/config.py
index dfdb0f2..7fe3a30 100644
--- a/customcmd-original/customcmd/core/config.py
+++ b/customcmd-patch/customcmd/core/config.py
@@ -16,7 +16,6 @@ EXPORTVAR = 5
 # Other
 
 DEFAULT_LANG = "ru"
-VERSION = 0x00000001
 
 # Variable set
 
diff --git a/customcmd-original/customcmd/locale/lang/c.po b/customcmd-patch/customcmd/locale/lang/c.po
index d8292f6..cb7ac3a 100644
--- a/customcmd-original/customcmd/locale/lang/c.po
+++ b/customcmd-patch/customcmd/locale/lang/c.po
@@ -1,43 +1,53 @@
-en
+ru
 command.pause.title
-Press enter to continue...
+Нажмите enter, чтобы продолжить...
 error.file.read
-Can't open file:
+Невозможно открыть файл:
 error.syscode.unregistered
-Unexpected syscode:
+Неожиданный системный код:
 io.file.open.try
-Trying to open file
+Попытка открыть файл
 io.file.name.display
-File:
+Файл:
 error.path.notexists
-No such file or directory:
+Нет такого файла или директории:
 error.command.unexpected
-Unexpected command:
+Неожиданная команда:
 error.path.notdir
-Path not a dir:
+Путь не является директорией:
 error.path.notfile
-Path not a file:
+Путь не является файлом:
 error.export.variable
-Can't set variable:
+Невозможно установить значение переменной:
 command.exit.done
-Exit expected!
+Выполнен выход!
 error.command.read.fewargs
-Few arguments for read!
+Недостаточно аргументов для команды read!
 error.export.variable.isnull
-Can't set variable, if it's null!
+Невозможно установить значение пустой переменной!
 error.export.variable.littleinfo
-Not enought or no info to set variable!
+Недостаточно или нет информации для установки переменной!
 error.command.loadcmd.fewargs
-Few arguments to load command file!
+Недостаточно аргументов для загрузки файла команд!
 io.file.replace.action
-This file will be replaced:
+Этот файл будет заменён:
 user.action.continue
-Continue [y]es/[n]o?
+Продолжить [д]а/[н]ет?
 user.action.answer.yes
-Yes
+Да
 user.action.answer.no
-No
+Нет
 error.locale.nolang
-No such language:
+Нет такого языка:
 locale.reload.trigger
-Locale reloaded!
+Язык установлен!
+db.all.setid.action
+Для создания новой БД надо указать её ИД. Ввведите его:
+db.all.sign.maybe
+БД могут быть подписаны
+db.all.sign.action
+Хотите ли вы подписать новую БД [д]а/[н]ет?
+db.all.sign.text.action
+Напишите текст для подписи ниже
+error.command.db.create.fewargs
+Недостаточно аргументов для создания базы данных!
diff --git a/customcmd-original/customcmd/locale/lang/en.po b/customcmd-patch/customcmd/locale/lang/en.po
index efa1fd7..1b12920 100644
--- a/customcmd-original/customcmd/locale/lang/en.po
+++ b/customcmd-patch/customcmd/locale/lang/en.po
@@ -40,3 +40,13 @@ error.locale.nolang
 No such language:
 locale.reload.trigger
 Locale reloaded!
+db.all.setid.action
+For creating new database, need to provide it ID. Please it write next:
+db.all.sign.maybe
+Databases can be signed
+db.all.sign.action
+Would you like to sign new db [y]es/[n]o?
+db.all.sign.text.action
+Please type the sign text above
+error.command.db.create.fewargs
+Few args for database create!
diff --git a/customcmd-original/customcmd/locale/lang/ru.po b/customcmd-patch/customcmd/locale/lang/ru.po
index 78bdaa4..e3919a7 100644
--- a/customcmd-original/customcmd/locale/lang/ru.po
+++ b/customcmd-patch/customcmd/locale/lang/ru.po
@@ -40,3 +40,13 @@ error.locale.nolang
 Нет такого языка:
 locale.reload.trigger
 Язык установлен!
+db.all.setid.action
+Для создания новой БД надо указать её ИД. Ввведите его:
+db.all.sign.maybe
+БД могут быть подписаны
+db.all.sign.action
+Хотите ли вы подписать новую БД [д]а/[н]ет?
+db.all.sign.text.action
+Напишите текст для подписи ниже
+error.command.db.create.fewargs
+Недостаточно аргументов для создания базы данных!
diff --git a/customcmd-original/customcmd/locale/tokens.py b/customcmd-patch/customcmd/locale/tokens.py
index ddf887a..65f67ad 100644
--- a/customcmd-original/customcmd/locale/tokens.py
+++ b/customcmd-patch/customcmd/locale/tokens.py
@@ -25,3 +25,8 @@ FEW_ARGS_ALL = "command.all.fewargs"
 FILE_WRITE_ERROR = "error.io.file.write"
 NO_SUCH_LOCALE = "error.locale.nolang"
 LOCALE_RELOADED = "locale.reload.trigger"
+NEED_FOR_DB_ID = "db.all.setid.action"
+IF_SIGN_DB = "db.all.sign.action"
+CAN_SIGN_DB = "db.all.sign.maybe"
+PLEASE_SET_SIGN_DATA = "db.all.sign.text.action"
+FEW_ARGS_FOR_CREATEDB = "error.command.db.create.fewargs"
diff --git a/customcmd-original/customcmd/wrapper/commands/__init__.py b/customcmd-patch/customcmd/wrapper/commands/__init__.py
index fd1b873..1ebf12f 100644
--- a/customcmd-original/customcmd/wrapper/commands/__init__.py
+++ b/customcmd-patch/customcmd/wrapper/commands/__init__.py
@@ -1,2 +1,3 @@
 from . import unix_like
 from . import bash_like
+from . import dbcmd_mod
diff --git a/customcmd-patch/customcmd/wrapper/commands/dbcmd_mod.py b/customcmd-patch/customcmd/wrapper/commands/dbcmd_mod.py
new file mode 100644
index 0000000..4455959
--- /dev/null
+++ b/customcmd-patch/customcmd/wrapper/commands/dbcmd_mod.py
@@ -0,0 +1,150 @@
+from ...tools import functions, pathutil
+from ...locale import locale, tokens
+from ...core import baseconfig
+
+import os
+
+
+
+def create_db(args: list):
+    '''
+    Create DB partitioning 
+    @param args[0] - File
+    @param args[1] - DB id
+    @param args[2] - (optional) DB sign
+    '''
+    if functions.return_if_few(args, 1, msg=tokens.FEW_ARGS_FOR_CREATEDB):
+        return
+    path = pathutil.get_full_path(args[0], return_else=True)
+    if os.path.exists(path):
+        if not functions.interactive(locale.get_by_token(tokens.NEED_REPLACE_FILE), locale.get_by_token(tokens.CONTINUE_QUESTION), _additional=args[0]):
+            return
+    db_name = args[1] if len(args) > 1 else input(f"{locale.get_by_token(tokens.NEED_FOR_DB_ID)} ")
+    db_sign = ""
+    if len(args) > 2:
+        db_sign = " ".join(args[2:]).replace("\\", "\n")
+    else:
+        if functions.interactive(locale.get_by_token(tokens.CAN_SIGN_DB), locale.get_by_token(tokens.IF_SIGN_DB)):
+            functions.info(f"{locale.get_by_token(tokens.PLEASE_SET_SIGN_DATA)}")
+            while True:
+                db_sign = functions.add_or_set_str(db_sign, input().strip().replace("\\", "\n"))
+                if not db_sign.endswith("\n"):
+                    break
+    db_data = __create_dbdata(db_sign, db_name)
+    functions.write_to_file(path, db_data)
+    
+
+def create_vdb():
+    pass
+
+def load_db():
+    pass
+
+def load_vdb():
+    pass
+
+def unload_db():
+    pass
+
+def unload_vdb():
+    pass
+
+def print_db():
+    pass
+
+def print_vdb():
+    pass
+
+def remove_vdb():
+    pass
+
+def remove_db():
+    pass
+
+# keys 
+
+# def add_key():
+#     pass
+
+# def remove_key():
+#     pass
+
+# def edit_key():
+#     pass
+
+# def print_key():
+#     pass
+
+def ls():
+    pass
+
+def rmkey():
+    pass
+
+def rmdir():
+    pass
+
+def cd():
+    pass
+
+def mkdir():
+    pass
+
+def addkey():
+    pass
+
+def __create_dbdata(s: str, n: str):
+    dbdata = ""
+    sign = s.encode().hex() if s != "" and s != None and s.strip() != "" else None
+    name = n.encode().hex()
+    s_len = len(sign) if sign != None else 0
+    n_len = len(name)
+    root = ".".encode().hex()
+    if s_len > baseconfig.MAXLEN or n_len > baseconfig.MAXNAMELEN:
+        functions.info('', level='e')
+        return None
+    dbdata = functions.add_or_set_str(dbdata, "64" if baseconfig._64BIT else "32")
+    dbdata = functions.add_or_set_str(dbdata, str(baseconfig.MAJORVERSION).encode().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_or_set_str(dbdata, str(baseconfig.MINORVERSION).encode().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_or_set_str(dbdata, str(baseconfig.SIGNED).encode().hex().zfill(baseconfig.MAXNAMEHEXLEN)) if sign != None else functions.add_or_set_str(dbdata, str(baseconfig.UNSIGNED).encode().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_or_set_str(dbdata, str(s_len).encode().hex().zfill(baseconfig.MAXHEXLEN)) if sign != None else dbdata
+    dbdata = functions.add_or_set_str(dbdata, sign.zfill(baseconfig.MAXHEXLEN)) if sign != None else dbdata
+    dbdata = functions.add_or_set_str(dbdata, str(n_len).encode().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_or_set_str(dbdata, name.zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_or_set_str(dbdata, str(baseconfig.DIR).encode().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_or_set_str(dbdata, str(len(root)).encode().hex().zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_or_set_str(dbdata, root.zfill(baseconfig.MAXNAMEHEXLEN))
+    dbdata = functions.add_or_set_str(dbdata, str(0).encode().hex().zfill(baseconfig.MAXHEXLEN))
+    return dbdata
+
+def __parse(dbdata: str):
+    pass
+'''
+The comments
+
+bits
+version
+s/u - signed/unsigned
+if s, Sign len
+if s, sign
+name len
+db name
+0x0001
+.
+num of files/dirs
+d/f (dir/file)
+
+name len    -|
+lol.keys    -|
+num of keys -| file
+keylen      -|
+key         -|
+
+d/f (dir/file)
+name len          -|
+users             -| 
+num of files/dirs -| dirs
+...
+0x0000
+'''
+
